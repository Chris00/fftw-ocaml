(** Fourier Transform of the 2D Henon map orbits.

    "A two-dimensional mapping with a strange attractor", M. Hénon,
    Commun. Math. Phys. 50, 69-77 (1976).
*)

open Printf
open Bigarray
module FFT = Fftw3.D

type mat = c_layout FFT.Array2.float_array

let t0 = Unix.gettimeofday()
let message fmt =
    let t = Unix.gettimeofday() -. t0 in
    let mins = t /. 60. and secs = mod_float t 60. in
    let print s = eprintf "%.0fm%02.3fs: %s\n%!" mins secs s in
    ksprintf print fmt

(* The Henon sequence is generated by iterating the map:

   x' = a + b * y - x^2
   y' = x

   [henon ~n_init xy] performs [n_init] iterations of the Henon map
   and stores the subsequent [Array2.dim2 xy] iterations into [xy].
*)
let henon ?(a=1.4) ?(b=0.3) ?(xy0=(1.,1.)) ?(n_init=0) (xy: mat) =
  let henon_map (x, y) = (a +. b *. y -. x *. x,  x) in
  let v = ref xy0 in
  for i = 1 to n_init do v := henon_map !v done;
  for i = 0 to Array2.dim2 xy - 1 do
    let (x,y) = !v in
    xy.{0,i} <- x;
    xy.{1,i} <- y;
    v := henon_map !v
  done


let henon_fft n fname =
  (* When [n] is large, allocating [xy] and [fftxy] takes a
     non-negligible amount of time. *)
  let xy = FFT.Array2.create FFT.float c_layout 2 n in
  let fftxy = FFT.Array2.create FFT.float c_layout 2 n in
  message "Matrices allocated.";
  (* Initialize the transform (destroy [xy]).  We perform a 1D
     transform on each of the 2 coordinates. *)
  let plan = FFT.Array2.r2r (FFT.REDFT00, FFT.REDFT00) xy fftxy
    ~inci:(0,1) ~howmanyi:[(1,0)] ~inco:(0,1) ~howmanyo:[(1,0)]
    ~meas:FFT.Measure in
  message "FFTW plan initialized.";
  henon ~n_init:10000 xy;
  message "Done %i Henon iterations." (10000 + n);
  FFT.exec plan;
  message "FFT performed!";
  let fh = open_out fname in
  for i = 0 to n - 1 do
    fprintf fh "%i %f %f %f %f\n" i xy.{0,i} xy.{1,i} fftxy.{0,i} fftxy.{1,i}
  done;
  close_out fh;
  message "Wrote %S." fname

let () =
  let n = ref 16384 (* 2^14 *) in
  let fname = ref(Filename.temp_file "henon" ".dat") in
  let args = Arg.align [
    ("-n", Arg.Set_int n,
     sprintf "i number of iterates to analyse (default %i)" !n);
    ("--output", Arg.Set_string fname, "fname output file (default: random)");
  ] in
  let usage = sprintf "%s: " Sys.argv.(0) in
  Arg.parse args (fun _ -> raise(Arg.Bad "no anonymous argument")) usage;

  henon_fft !n !fname
